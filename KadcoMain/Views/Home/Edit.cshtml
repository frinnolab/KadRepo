@model KadcoMain.ViewModels.CollectedBillViewModel
@{
    ViewBag.Title = "Edit";
}
<div class="ui container index-container">
    <div id="mainTextContainer">
        <h1 class="textbig">Edit @Model.collectedBill.PayerName</h1>
    </div>

    <hr />

    <div class="ui card fluid">
        <div class="header">
            Update Bill
        </div>
        @using (Html.BeginForm("SaveBill", "Home", method: FormMethod.Post,
            htmlAttributes: new { @class = "ui form container" }))
        {
            @Html.AntiForgeryToken()

            //Bill inputs
            <div class="three fields">
                <div class="field">
                    <label>Bill Date</label>

                    @Html.EditorFor(m => m.collectedBill.BillDate)

                </div>

                <div class="field">
                    <label>Currency</label>
               
                    @if ((@Model.collectedBill.Currency_Id != null) && (@Model.collectedBill.Currency_Id > 0))
                    {

                        @Html.DropDownListFor(m => m.collectedBill.Currency_Id,
                      new SelectList(Model.Currencies, "id", "Country"), "--" + Model.collectedBill.Currency_Name + "--",
                      new { @class = "ui dropdown", onchange = "getContents(this.value)" })

                    }
                    else
                    {
                        @Html.DropDownListFor(m => m.collectedBill.Currency_Id,
                      new SelectList(Model.Currencies, "id", "Country"), "--Select Currency--",
                      new { @class = "ui dropdown", onchange = "getContents(this.value)" })

                    }
                </div>
                <div class="field">
                    <label>Currency Rate</label>

                    @Html.TextBoxFor(m => m.collectedBill.ExchangeRate, "", new { @type = "number", @id = "currRateTxt", @placeholder = Model.collectedBill.ExchangeRate })
                    
                </div>

            </div>

            //User inputs
            <div class="three fields">
                <div class="field">
                    <label>Payer name</label>

                    @Html.TextBoxFor(m => m.collectedBill.PayerName, "", new { @type = "text", @placeholder = Model.collectedBill.PhoneNumber })
                </div>

                <div class="field">
                    <label>Phone Number</label>

                    @Html.TextBoxFor(m => m.collectedBill.PhoneNumber, "", new { @class = "ui input", @type = "text", @placeholder = Model.collectedBill.PhoneNumber })
                </div>
                <div class="field">
                    <label>Payment Code</label>

                    @if ((@Model.collectedBill.PaymentCode_Id != null) && (@Model.collectedBill.PaymentCode_Id > 0))
                    {

                        @Html.DropDownListFor(m => m.collectedBill.PaymentCode_Id,
                      new SelectList(Model.PaymentCodes, "id", "CodeNumber"), "--" + Model.collectedBill.PaymentCode + "--",
                      new { @class = "ui dropdown" })

                    }
                    else
                    {
                        @Html.DropDownListFor(m => m.collectedBill.PaymentCode_Id,
                      new SelectList(Model.PaymentCodes, "id", "CodeNumber"), "--Select PayCodes--",
                      new { @class = "ui dropdown" })

                    }
                </div>
            </div>



            //Cash inputs
            <div class="three fields">
                <div class="field">
                    <label>GFS Code</label>
                    @if ((@Model.collectedBill.GFS_CodeId != null) && (@Model.collectedBill.GFS_CodeId > 0))
                    {

                        @Html.DropDownListFor(m => m.collectedBill.GFS_CodeId,
                      new SelectList(Model.gFSCodes, "id", "CodeNumber"), "--" + Model.collectedBill.GFSCodeStr + "--",
                      new { @class = "ui dropdown" })

                    }
                    else
                    {
                        @Html.DropDownListFor(m => m.collectedBill.GFS_CodeId,
                      new SelectList(Model.gFSCodes, "id", "CodeNumber"), "--Select GFS Code--",
                      new { @class = "ui dropdown" })

                    }




                </div>

                <div class="field">
                    <label>Amount Paid</label>

                    @Html.TextBoxFor(m => m.collectedBill.Amount, "", new { @type = "number", @placeholder = Model.collectedBill.Amount, onchange = "amountChange(this.value)"  })
                    
                </div>

                <div class="field">
                    <label>Total Amount (TZS)</label>
                    @Html.TextBoxFor(m => m.collectedBill.TotalAmount, "", new { @class = "disabled", @type = "number", @placeholder = Model.collectedBill.TotalAmount })
                    
                </div>

            </div>

            //Control Numbers
            <div class="three fields">
                <div class="field">
                    <label>Control Number</label>

                    @if (Model.collectedBill.ControlNo != null)
                    {
                        @Html.TextBoxFor(m => m.collectedBill.ControlNo, "", new { @id = "controlNumField", @type = "text", @placeholder = Model.collectedBill.ControlNo })
                    }

                    @*@Html.TextBoxFor(m => m.collectedBill.ControlNo, "", new { @id = "controlNumField", @type = "text", @placeholder = "Nill" })*@



                </div>

                <div class="field">
                    <label>.</label>

                    @if (Model.collectedBill.ControlNo != null)
                    {
                        //@Html.TextBox("", "", new { @display=none})
                    }

                    <a class="ui right labeled icon button btnControlNo" id=@Model.collectedBill.id href="@Url.Action("GetControlNo", "Home", new { @id = Model.collectedBill.id })">
                        Request Control Number
                        <i class="right refresh icon"></i>
                    </a>

                </div>

            </div>

            <div class="field">
                <label>Description</label>

                @Html.TextAreaFor(m => m.collectedBill.Description, new { @rows = "2" })

                @Html.Hidden("hiddenID", Model.collectedBill.id)
            </div>

            <div class="actions">
                @*<div class="ui black deny button">
                    Discard
                </div>*@
                <button type="submit" class="ui positive button">
                    Update Bill
                </button>
            </div>


        }
    </div>

</div>

<style>

    .textBig {
        font-size: 60px;
    }

    .index-container {
        padding: 20px;
        height: 90vh;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-content: space-around;
    }

    #mainTextContainer {
        text-align: center;
        padding: 10px;
    }

    #billIstHeader {
    }

    .fields {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
    }

    .bill-action-container {
        padding-top: 2%;
        display: flex;
    }

    #billSearch {
        flex-grow: 2;
    }

    #billNew {
        flex-grow: 1;
        display: flex;
        justify-content: flex-end;
        align-items: flex-end
    }

    #newBill {
        align-self: flex-end;
    }
</style>

<script type="text/javascript">

    //onchange = "getContents(this.value)"
    $(document).ready(() => {
        //alert('Test');
        //Data Table
        $('#billTable').DataTable({
            "pageLength": 3
        });

        $('#billTable').on('click', 'tbody td', function () {
            if (table.data().length !== 0) {
                editor.inline(this);
            }
        });


        //
        $('#newBill').on('click', () => {
            $('.ui.modal').modal('show');
        });

        //Process Bill Form
        getContents(val);


    });


    //process currency rate
    var totalAmountTxt = document.querySelector("#collectedBill_TotalAmount");
    var amount, gfDrop, rate;
    function amountChange() {
        amount = document.querySelector("#collectedBill_Amount").value;
        rate = document.querySelector("#currRateTxt").value;

        var finalAmount = parseFloat(amount) * parseFloat(rate);

        totalAmountTxt.setAttribute("value", finalAmount);

        totalAmountTxt.textContent = finalAmount;
    }


    function getContents(val) {
        getCurrencyRate(val);
        getGFCodes(val);
        getPayCodes(val);
    }

    function getCurrencyRate(id) {

        url_ = "/Home/GetCurrRate/" + id;
        $.ajax({
            url: url_,
            data: {id:id},
            dataType: "json",
            type: "GET",
            error: function () {
            alert(" An error occurred.");
                },
            success: function (data) {
                var currText = document.querySelector("#currRateTxt");
                currText.setAttribute("value", data);
                }
        });

        //fetch(url)
        //    .then((response) => {
        //        return response.json();
        //    })
        //    .then((data) => {
        //        var currText = document.querySelector("#currRateTxt");
        //        var totalAmount;
        //        currText.setAttribute("value", data);

        //        // totalAmount = parseFloat(data) * parseFloat(amount);

        //        //totalAmountTxt.setAttribute("value", totalAmount);
        //        //totalAmountTxt.setAttribute("placeholder", totalAmount);
        //    });
    }

    function getGFCodes(id) {
        var url_ = "/Home/GetGfsCodes/" + id;

        $.ajax({
            url: url_,
            data: { id: id },
            dataType: "json",
            type: "GET",
            error: () => {
                alert("GFS Codes Error!.");
            },
            success: (data) => {
                gfDrop = document.querySelector("#collectedBill_GFS_CodeId");

                while (gfDrop.firstChild) {
                    gfDrop.removeChild(gfDrop.firstChild);
                }

                var gfoption = '<option value="' + 0 + '">' +
                    "--Select GFS Codes--" +
                    '</option>';

                $("#collectedBill_GFS_CodeId").append(gfoption);

                $.each(data, (item) => {

                    //console.log(item);
                    var gfoptions = '<option value="' +
                        data[item].id + '">' +
                        data[item].CodeNumber +
                        '</option>';

                    $("#collectedBill_GFS_CodeId").append(gfoptions);
                });
            }

        });
    }

    function getPayCodes(id) {
        var url_ = "/Home/GetPayCodes/" + id;

        $.ajax({
            url: url_,
            data: { id: id },
            dataType: "json",
            type: "GET",
            error: () => {
                alert("Payment Codes Error!.");
            },
            success: (data) => {
                payDrop = document.querySelector("#collectedBill_PaymentCode_Id");

                while (payDrop.firstChild) {
                    payDrop.removeChild(payDrop.firstChild);
                }

                var payOption = '<option value="' + 0 + '">' +
                    "--Select Payment Codes--" +
                    '</option>';

                $("#collectedBill_PaymentCode_Id").append(payOption);

                //debugger

                $.each(data, (item) => {
                    var payOptions = '<option value="' +
                        data[item].Id + '">' +
                        data[item].CodeNumber +
                        '</option>';

                    $("#collectedBill_PaymentCode_Id").append(payOptions);
                });
            }

        });
    }

    //Post to Sage
    var postToSage = document.querySelector("#postToSageBtn").addEventListener("click", () => {
        var url = "/Home/SaveToSage/"
        fetch(url)
            .then((result) => {
                result.json();
            })
            .then((data) => {
                Console.log(data);
            })
    });
</script>




